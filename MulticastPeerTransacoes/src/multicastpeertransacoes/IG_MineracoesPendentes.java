/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package multicastpeertransacoes;

import Comunicacao.OperacoesCom;
import DataBase.ControleDB;
import static DataBase.ControleDB.consultarDBOficial;
import DataBase.FuncoesDB;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableModel;

/**
 *
 * @author Felipe Lopes Zem
 */
public final class IG_MineracoesPendentes extends javax.swing.JFrame {
    IG_MAIN igMain;

    /**
     * Creates new form IG_Peers
     */
    public IG_MineracoesPendentes() {
        initComponents();
    }
    
    protected void atualizarTabela(){
        ResultSet rs;
        TableModel tm;
        String sql = "select * from mineracaopendente where idminerador = 0;";
        
        ControleDB.abrirConexaoDBOficial();
        rs = ControleDB.consultarDBOficial(sql);
        tm = ControleDB.resultSetToTableModel(rs);
        ControleDB.fecharConexaoDBOficial();
        jTable1.setModel(tm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        b_atualizar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tf_idMineracao = new javax.swing.JTextField();
        b_autorizaUm = new javax.swing.JButton();
        b_autorizaTodos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Minerações pendentes");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        b_atualizar.setText("Atualizar tabela");
        b_atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_atualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                    .addComponent(b_atualizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(b_atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Ações"));

        jLabel1.setText("ID da Mineração: ");

        b_autorizaUm.setText("Minerar este");
        b_autorizaUm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_autorizaUmActionPerformed(evt);
            }
        });

        b_autorizaTodos.setText("Minerar TODOS");
        b_autorizaTodos.setEnabled(false);
        b_autorizaTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_autorizaTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf_idMineracao))
            .addComponent(b_autorizaUm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(b_autorizaTodos, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tf_idMineracao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_autorizaUm)
                .addGap(18, 18, 18)
                .addComponent(b_autorizaTodos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_atualizarActionPerformed
        atualizarTabela();
    }//GEN-LAST:event_b_atualizarActionPerformed

    private void b_autorizaUmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_autorizaUmActionPerformed
        int enviador, recebedor, coins, idTransacao;
        try {
            int idRec = Integer.parseInt(tf_idMineracao.getText());
            ResultSet rs;
            ControleDB.abrirConexaoDBOficial();
            rs = ControleDB.consultarDBOficial("select idenviador, idrecebedor, qtdcoins, idtransacao from mineracaopendente where id = " + idRec);
            rs.first();
            enviador = rs.getInt("idenviador");
            recebedor = rs.getInt("idrecebedor");
            coins = rs.getInt("qtdcoins");
            idTransacao = rs.getInt("idtransacao");
            ControleDB.fecharConexaoDBOficial();
            
            //[TODO] Verificar: int idEnviador, int idRecebedor, int coins, int idMinerador
            OperacoesCom.transferirCoinsFake(enviador,recebedor,coins,igMain.getIdPeer());
            
            FuncoesDB.atualizarMineracao(recebedor, enviador, coins, igMain.getIdPeer());
            
            String msLog = "<Minerando> (" + igMain.getIdPeer() + ") está minerando Transação. @" + coins + "@ Coins de $"+enviador+"$ para &"+recebedor+"&</Enviando>";

            //PeerRecebedor, peerEnviador, peerMinerador - 0 ainda não tem minerador, Estado - 0 Não aceito ainda, Mensagem
            FuncoesDB.insereLogPeerOficial(recebedor, enviador, 0, 4, msLog);

            //Marca no próprio banco de dados que, para a transação idTransação, ele é o minerador responsável.
            FuncoesDB.obterMineracao(igMain.getIdPeer(), idTransacao);
            
            //Trava o peer MINERADOR!
            igMain.travarPeer(idTransacao);
        } catch (SQLException ex) {
            Logger.getLogger(IG_MineracoesPendentes.class.getName()).log(Level.SEVERE, null, ex);
        }
        minerar();
        atualizarTabela();
    }//GEN-LAST:event_b_autorizaUmActionPerformed

    private void b_autorizaTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_autorizaTodosActionPerformed
        // [TODO intencional!] add your handling code here:
    }//GEN-LAST:event_b_autorizaTodosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new IG_MineracoesPendentes().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_atualizar;
    private javax.swing.JButton b_autorizaTodos;
    private javax.swing.JButton b_autorizaUm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tf_idMineracao;
    // End of variables declaration//GEN-END:variables

    void setIgMain(IG_MAIN igMain) {
        this.igMain = igMain;
    }
    
    private void minerar(){
        try {
            int id, idEnviador, idRecebedor, qtdCoins, idTransacao;
            ControleDB.abrirConexaoDBOficial();
            ResultSet rs = ControleDB.consultarDBOficial("select * from mineracaopendente where idminerador = " + igMain.getIdPeer() + ";");
//            while(rs.next())
//            {
            rs.first();
            id = Integer.parseInt(rs.getString("id"));
            idEnviador = Integer.parseInt(rs.getString("idenviador"));
            idRecebedor = Integer.parseInt(rs.getString("idrecebedor"));
            qtdCoins = Integer.parseInt(rs.getString("qtdcoins"));
            //idMinerador = Integer.parseInt(rs.getString("idminerador"));
            idTransacao = Integer.parseInt(rs.getString("idtransacao"));
            String sender = FuncoesDB.buscaPeerNome(idEnviador);
            String receiver = FuncoesDB.buscaPeerNome(idRecebedor);

            FuncoesDB.atualizarMineradorTransacao(idTransacao, igMain.getIdPeer());

            if (OperacoesCom.minerar(sender, receiver, qtdCoins, igMain.getNomePeer())){
                igMain.sendMessageMC(Main.MSG_MINING_IS_OK +
                        idTransacao + ";;;" +
                        1 + ";;;" +     //estado 1 - TRANSAÇÃO OK
                        igMain.getIdPeer());
            String msLog = "<Resultado Mineração> (" + igMain.getIdPeer() + ") Minerou Transação. @" + idTransacao + "@ de["+idEnviador+"]"
                    + " para %"+idRecebedor+"% coins:"+qtdCoins+": Resultado+"+Main.MSG_MINING_IS_OK+"+</Resultado Mineração>";

            //PeerRecebedor, peerEnviador, peerMinerador - 0 ainda não tem minerador, Estado - 0 Não aceito ainda, Mensagem
            FuncoesDB.insereLogPeerOficial(idEnviador, idRecebedor, igMain.getIdPeer(), 1, msLog);
            }else{
                igMain.sendMessageMC(Main.MSG_MINING_NOT_OK +
                        idTransacao + ";;;" +
                        3 + ";;;" +     //estado 3 - REFUSED
                        igMain.getIdPeer());
            }
                String msLog = "<Resultado Mineração> (" + igMain.getIdPeer() + ") Minerou Transação. @" + idTransacao + "@ de["+idEnviador+"]"
                        + " para %"+idRecebedor+"% coins:"+qtdCoins+": Resultado+"+Main.MSG_MINING_NOT_OK+"+</Resultado Mineração>";

                //PeerRecebedor, peerEnviador, peerMinerador - 0 ainda não tem minerador, Estado - 0 Não aceito ainda, Mensagem
                FuncoesDB.insereLogPeerOficial(idEnviador, idRecebedor, igMain.getIdPeer(), 3, msLog);
                FuncoesDB.removerMineracao(id);
            //}
        } catch (SQLException ex) {
            Logger.getLogger(IG_MineracoesPendentes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
